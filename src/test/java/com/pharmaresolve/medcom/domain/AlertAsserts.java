package com.pharmaresolve.medcom.domain;

import static com.pharmaresolve.medcom.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class AlertAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlertAllPropertiesEquals(Alert expected, Alert actual) {
        assertAlertAutoGeneratedPropertiesEquals(expected, actual);
        assertAlertAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlertAllUpdatablePropertiesEquals(Alert expected, Alert actual) {
        assertAlertUpdatableFieldsEquals(expected, actual);
        assertAlertUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlertAutoGeneratedPropertiesEquals(Alert expected, Alert actual) {
        assertThat(actual)
            .as("Verify Alert auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlertUpdatableFieldsEquals(Alert expected, Alert actual) {
        assertThat(actual)
            .as("Verify Alert relevant properties")
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getMessage()).as("check message").isEqualTo(expected.getMessage()))
            .satisfies(a ->
                assertThat(a.getCreated()).as("check created").usingComparator(zonedDataTimeSameInstant).isEqualTo(expected.getCreated())
            )
            .satisfies(a ->
                assertThat(a.getSentAt()).as("check sentAt").usingComparator(zonedDataTimeSameInstant).isEqualTo(expected.getSentAt())
            )
            .satisfies(a ->
                assertThat(a.getResolvedAt())
                    .as("check resolvedAt")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getResolvedAt())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAlertUpdatableRelationshipsEquals(Alert expected, Alert actual) {
        assertThat(actual)
            .as("Verify Alert relationships")
            .satisfies(a -> assertThat(a.getWatchlistItem()).as("check watchlistItem").isEqualTo(expected.getWatchlistItem()));
    }
}
