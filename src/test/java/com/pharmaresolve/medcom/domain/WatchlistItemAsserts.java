package com.pharmaresolve.medcom.domain;

import static com.pharmaresolve.medcom.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class WatchlistItemAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWatchlistItemAllPropertiesEquals(WatchlistItem expected, WatchlistItem actual) {
        assertWatchlistItemAutoGeneratedPropertiesEquals(expected, actual);
        assertWatchlistItemAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWatchlistItemAllUpdatablePropertiesEquals(WatchlistItem expected, WatchlistItem actual) {
        assertWatchlistItemUpdatableFieldsEquals(expected, actual);
        assertWatchlistItemUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWatchlistItemAutoGeneratedPropertiesEquals(WatchlistItem expected, WatchlistItem actual) {
        assertThat(actual)
            .as("Verify WatchlistItem auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWatchlistItemUpdatableFieldsEquals(WatchlistItem expected, WatchlistItem actual) {
        assertThat(actual)
            .as("Verify WatchlistItem relevant properties")
            .satisfies(a ->
                assertThat(a.getDateAdded())
                    .as("check dateAdded")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getDateAdded())
            )
            .satisfies(a -> assertThat(a.getPriority()).as("check priority").isEqualTo(expected.getPriority()))
            .satisfies(a -> assertThat(a.getAddedBy()).as("check addedBy").isEqualTo(expected.getAddedBy()))
            .satisfies(a -> assertThat(a.getAlertEnabled()).as("check alertEnabled").isEqualTo(expected.getAlertEnabled()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWatchlistItemUpdatableRelationshipsEquals(WatchlistItem expected, WatchlistItem actual) {
        assertThat(actual)
            .as("Verify WatchlistItem relationships")
            .satisfies(a -> assertThat(a.getWatchlist()).as("check watchlist").isEqualTo(expected.getWatchlist()))
            .satisfies(a -> assertThat(a.getProduct()).as("check product").isEqualTo(expected.getProduct()));
    }
}
