package com.pharmaresolve.medcom.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class WatchlistAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWatchlistAllPropertiesEquals(Watchlist expected, Watchlist actual) {
        assertWatchlistAutoGeneratedPropertiesEquals(expected, actual);
        assertWatchlistAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWatchlistAllUpdatablePropertiesEquals(Watchlist expected, Watchlist actual) {
        assertWatchlistUpdatableFieldsEquals(expected, actual);
        assertWatchlistUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the derived primary key is set correctly.
     *
     * @param entityToPersist the entity used to persist
     * @param persisted the persisted entity
     */
    public static void assertWatchlistMapsIdRelationshipPersistedValue(Watchlist entityToPersist, Watchlist persisted) {
        // Validate the id for MapsId, the ids must be same
        assertThat(entityToPersist.getPharmacy().getId()).isEqualTo(persisted.getId());
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWatchlistAutoGeneratedPropertiesEquals(Watchlist expected, Watchlist actual) {
        assertThat(actual)
            .as("Verify Watchlist auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWatchlistUpdatableFieldsEquals(Watchlist expected, Watchlist actual) {
        assertThat(actual)
            .as("Verify Watchlist relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getLimit()).as("check limit").isEqualTo(expected.getLimit()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWatchlistUpdatableRelationshipsEquals(Watchlist expected, Watchlist actual) {
        // empty method
    }
}
