package com.pharmaresolve.medcom.domain;

import static com.pharmaresolve.medcom.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class PharmacyAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPharmacyAllPropertiesEquals(Pharmacy expected, Pharmacy actual) {
        assertPharmacyAutoGeneratedPropertiesEquals(expected, actual);
        assertPharmacyAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPharmacyAllUpdatablePropertiesEquals(Pharmacy expected, Pharmacy actual) {
        assertPharmacyUpdatableFieldsEquals(expected, actual);
        assertPharmacyUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPharmacyAutoGeneratedPropertiesEquals(Pharmacy expected, Pharmacy actual) {
        assertThat(actual)
            .as("Verify Pharmacy auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPharmacyUpdatableFieldsEquals(Pharmacy expected, Pharmacy actual) {
        assertThat(actual)
            .as("Verify Pharmacy relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getAddress()).as("check address").isEqualTo(expected.getAddress()))
            .satisfies(a -> assertThat(a.getEmail()).as("check email").isEqualTo(expected.getEmail()))
            .satisfies(a -> assertThat(a.getPhone()).as("check phone").isEqualTo(expected.getPhone()))
            .satisfies(a -> assertThat(a.getWebsite()).as("check website").isEqualTo(expected.getWebsite()))
            .satisfies(a -> assertThat(a.getActive()).as("check active").isEqualTo(expected.getActive()))
            .satisfies(a ->
                assertThat(a.getCreated()).as("check created").usingComparator(zonedDataTimeSameInstant).isEqualTo(expected.getCreated())
            )
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getActivatedBy()).as("check activatedBy").isEqualTo(expected.getActivatedBy()))
            .satisfies(a -> assertThat(a.getDeactivatedBy()).as("check deactivatedBy").isEqualTo(expected.getDeactivatedBy()))
            .satisfies(a -> assertThat(a.getDeleted()).as("check deleted").isEqualTo(expected.getDeleted()))
            .satisfies(a -> assertThat(a.getDeletedBy()).as("check deletedBy").isEqualTo(expected.getDeletedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPharmacyUpdatableRelationshipsEquals(Pharmacy expected, Pharmacy actual) {
        // empty method
    }
}
